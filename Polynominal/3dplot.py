"""
===-*- Polynominal Interpolation Tool -*-===
=====-*- General -*-=====
Copyright (c) makkiblog.com
MIT License 
coding: utf-8

===-*- VERSION -*-===
v0.0 Initial Release
vvvCODEvvv
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# The data as a string
data_str = """0.1 0.12 0.144 0.1728 0.20736 0.248832 0.298598 0.358318 0.429982 0.515978 0.619174 0.743008 0.89161 1.069932 1.283918 1.540702 1.848843 2.218611   0.1 0.078431 0.078458 0.078486 0.078516 0.078546 0.078572 0.078592 0.078596 0.078575 0.078512 0.078381 0.078144 0.077745 0.077103 0.076094 0.074543 0.07219 0.068659   0.12 0.078611 0.07864 0.078671 0.078704 0.078738 0.078769 0.078794 0.078805 0.078792 0.078738 0.078618 0.078395 0.078013 0.07739 0.076405 0.074882 0.072564 0.069073   0.144 0.078835 0.078866 0.078901 0.078937 0.078976 0.079012 0.079044 0.079063 0.079059 0.079017 0.078911 0.078704 0.078342 0.077742 0.076786 0.075297 0.073019 0.069578   0.1728 0.079114 0.079149 0.079187 0.079228 0.079272 0.079315 0.079355 0.079383 0.079391 0.079362 0.079273 0.079086 0.078747 0.078176 0.077254 0.075806 0.073577 0.070195   0.20736 0.079465 0.079503 0.079546 0.079593 0.079643 0.079694 0.079743 0.079783 0.079805 0.079792 0.079722 0.079559 0.079249 0.078712 0.07783 0.076432 0.074262 0.07095   0.248832 0.079908 0.079951 0.079999 0.080052 0.080111 0.080172 0.080232 0.080286 0.080324 0.080331 0.080285 0.08015 0.079873 0.079377 0.078545 0.077205 0.075106 0.071879   0.298598 0.080472 0.08052 0.080575 0.080636 0.080704 0.080776 0.08085 0.080921 0.080978 0.081009 0.080991 0.08089 0.080655 0.080208 0.079435 0.078165 0.076151 0.073025   0.358318 0.081195 0.08125 0.081312 0.081384 0.081463 0.081549 0.081639 0.081729 0.08181 0.08187 0.081886 0.081826 0.081639 0.081251 0.080548 0.079364 0.077451 0.074448   0.429982 0.082129 0.082192 0.082264 0.082347 0.08244 0.082542 0.082652 0.082766 0.082875 0.082969 0.083026 0.083015 0.082888 0.08257 0.081952 0.080869 0.079078 0.076222   0.515978 0.083347 0.083419 0.083503 0.083599 0.083708 0.08383 0.083964 0.084106 0.08425 0.084384 0.08449 0.084538 0.084481 0.084249 0.083732 0.082772 0.081127 0.078447   0.619174 0.084947 0.08503 0.085128 0.08524 0.085369 0.085515 0.085677 0.085853 0.086038 0.086221 0.086386 0.086505 0.086533 0.086402 0.086008 0.085193 0.083725 0.081255   0.743008 0.087066 0.087163 0.087277 0.087409 0.087562 0.087736 0.087932 0.088149 0.088383 0.088625 0.088861 0.089064 0.089194 0.089185 0.088937 0.088299 0.087041 0.084824   0.89161 0.089896 0.09001 0.090144 0.0903 0.090481 0.090689 0.090926 0.091192 0.091485 0.091797 0.092118 0.092423 0.092675 0.092812 0.09274 0.092313 0.091308 0.089395   1.069932 0.093707 0.09384 0.093997 0.094182 0.094397 0.094646 0.094932 0.095257 0.09562 0.096018 0.09644 0.096867 0.097265 0.097578 0.097717 0.097543 0.096842 0.095294   1.283918 0.098875 0.099032 0.099217 0.099436 0.099692 0.09999 0.100335 0.10073 0.101178 0.101678 0.102222 0.102795 0.10337 0.103894 0.104286 0.104415 0.104079 0.102968"""

# Split the data into rows
rows = data_str.strip().split('   ')

# Parse the first row as x values
x_values = np.array([float(val) for val in rows[0].split()])

# Parse the remaining rows
data_rows = []
for i in range(1, len(rows)):
    values = [float(val) for val in rows[i].split()]
    data_rows.append(values)

# Extract y values (first element of each row)
y_values = np.array([row[0] for row in data_rows])

# Extract z values (remaining elements of each row)
z_values = np.array([row[1:] for row in data_rows])

# Create a meshgrid for 3D plotting
X, Y = np.meshgrid(x_values, y_values)

# Create the 3D plot
fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

# Plot the surface
surf = ax.plot_surface(X, Y, z_values, cmap='viridis', edgecolor='none', alpha=0.8)

# Add a color bar
fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)

# Set labels
ax.set_xlabel('CW')
ax.set_ylabel('TW')
ax.set_zlabel('PSD')
ax.set_title('3D Surface Plot')

# Show the plot
plt.tight_layout()
plt.show()